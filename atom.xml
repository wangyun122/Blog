<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>this.dog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://this.dog/"/>
  <updated>2017-04-16T16:21:21.000Z</updated>
  <id>http://this.dog/</id>
  
  <author>
    <name>wangyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lodash</title>
    <link href="http://this.dog/2017/04/17/lodash/"/>
    <id>http://this.dog/2017/04/17/lodash/</id>
    <published>2017-04-16T16:18:41.000Z</published>
    <updated>2017-04-16T16:21:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h1><p>有多年开发经验的工程师，往往都会有自己的一套工具库，称为 utils、helpers 等等，这套库一方面是自己的技术积累，另一方面也是对某项技术的扩展，领先于技术规范的制定和实现。</p>
<p>Lodash 就是这样的一套工具库，它内部封装了诸多对字符串、数组、对象等常见数据类型的处理函数，其中部分是目前 ECMAScript 尚未制定的规范，但同时被业界所认可的辅助函数。目前每天使用 npm 安装 Lodash 的数量在百万级以上，这在一定程度上证明了其代码的健壮性，值得我们在项目中一试。</p>
<h2 id="模块组成"><a href="#模块组成" class="headerlink" title="模块组成"></a>模块组成</h2><p>Lodash 提供的辅助函数主要分为以下几类，函数列表和用法实例请查看 <a href="https://lodash.com/docs" target="_blank" rel="external">Lodash 的官方文档</a> ：</p>
<ul>
<li><code>Array</code> ，适用于数组类型，比如填充数据、查找元素、数组分片等操作</li>
<li><code>Collection</code> ，适用于数组和对象类型，部分适用于字符串，比如分组、查找、过滤等操作</li>
<li><code>Function</code> ，适用于函数类型，比如节流、延迟、缓存、设置钩子等操作</li>
<li><code>Lang</code> ，普遍适用于各种类型，常用于执行类型判断和类型转换</li>
<li><code>Math</code> ，适用于数值类型，常用于执行数学运算</li>
<li><code>Number</code> ，适用于生成随机数，比较数值与数值区间的关系</li>
<li><code>Object</code> ，适用于对象类型，常用于对象的创建、扩展、类型转换、检索、集合等操作</li>
<li><code>Seq</code> ，常用于创建链式调用，提高执行性能（惰性计算）</li>
<li><p><code>String</code> ，适用于字符串类型<br><code>lodash/fp</code> 模块提供了更接近函数式编程的开发方式，其内部的函数经过包装，具有 immutable、auto-curried、iteratee-first、data-last（官方介绍）等特点。Lodash 在 <a href="https://github.com/lodash/lodash/wiki/FP-Guide" target="_blank" rel="external">GitHub Wiki</a> 中对 lodash/fp 的特点做了如下概述：</p>
</li>
<li><p>Fixed Arity，固化参数个数，便于柯里化</p>
</li>
<li>Rearragned Arguments，重新调整参数位置，便于函数之间的聚合</li>
<li>Capped Iteratee Argument，封装 Iteratee 参数</li>
<li>New Methods<blockquote>
<p>In functional programming, an iteratee is a composable abstraction for incrementally processing sequentially presented chunks of input data in a purely functional fashion. With iteratees, it is possible to lazily transform how a resource will emit data, for example, by converting each chunk of the input to uppercase as they are retrieved or by limiting the data to only the five first chunks without loading the whole input data into memory. Iteratees are also responsible for opening and closing resources, providing predictable resource management. ———— <a href="https://en.wikipedia.org/wiki/Iteratee" target="_blank" rel="external">iteratee, wikipedia</a></p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_.map([&apos;6&apos;, &apos;8&apos;, &apos;10&apos;], parseInt);fp.map(parseInt)([&apos;6&apos;, &apos;8&apos;, &apos;10&apos;]);fp.padCharsStart(&apos;-&apos;)(3)(&apos;a&apos;);var compact = _.partial(_.filter, _, Boolean);compact([&apos;a&apos;, null, &apos;c&apos;]);var compact = fp.filter(Boolean);compact([&apos;a&apos;, null, &apos;c&apos;]);</div></pre></td></tr></table></figure>
<p>在 React + Webpack + Babel(ES6) 的开发环境中，使用 Lodash 需要安装插件 <a href="https://www.npmjs.com/package/babel-plugin-lodash" target="_blank" rel="external">babel-plugin-lodash</a> 并更新 Babel 配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save lodashnpm install --save-dev babel-plugin-lodash</div></pre></td></tr></table></figure>
<p>更新 Babel 的配置文件 <code>.babelrc</code>:</p>
<p>使用方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &#123; add &#125; from &apos;lodash/fp&apos;;_.map([1, 2, 3], addOne);</div></pre></td></tr></table></figure>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>在 Filip Zawada 的文章 <a href="http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/" target="_blank" rel="external">《How to Speed Up Lo-Dash ×100? Introducing Lazy Evaluation》</a> 中提到了 Lodash 提高执行速度的思路，主要有三点：Lazy Evaluation、Pipelining 和 Deferred Execution。下面两张图来自 Filip 的博客：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1feozanssyvg30b407sasu.gif" alt="p1"><br>假设有如上图所示的问题：从若干个球中取出三个面值小于 10 的球。第一步是从所有的球中取出所有面值小于 10 的球，第二步是从上一步的结果取三个球。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1feozb5yszjg30b407s132.gif" alt="p2"><br>上图是另一种解决方案，如果一个球能够通过第一步，那么就继续执行第二步，直至结束然后测试下一个球……当我们取到三个球之后就中断整个循环。Filip 称这是 Lazy Evaluation Algorithm，就个人理解这并不全面，他后续提到的 Pipelining(管道计算)，再加上一个中断循环执行的算法应该更符合这里的图示。</p>
<p>此外，使用 Lodash 的链式调用时，只有显示或隐式调用 <code>.value</code> 方法才会对链式调用的整个操作进行取值，这种不在声明时立即求值，而在使用时求值的方式，是 Lazy Evaluation 最大的特点。</p>
<h2 id="九个实例"><a href="#九个实例" class="headerlink" title="九个实例"></a>九个实例</h2><p>受益于 Lodash 的普及程度，使用它可以提高多人开发时阅读代码的效率，减少彼此之间的误解（Loss of Consciousness）。在 <a href="http://colintoh.com/blog/lodash-10-javascript-utility-functions-stop-rewriting" target="_blank" rel="external">《Lodash: 10 Javascript Utility Functions That You Should Probably Stop Rewriting》</a> 一文中，作者列举了多个常用的 Lodash 函数，实例演示了使用 Lodash 的技巧。</p>
<ol>
<li>N 次循环</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for(var i = 0; i &lt; 5; i++) &#123;Array.apply(null, Array(5)).forEach(function()&#123;</div></pre></td></tr></table></figure>
<p><code>for</code> 语句是执行循环的不二选择， <code>Array.apply</code> 也可以模拟循环，但在上面代码的使用场景下， <code>_.times()</code> 的解决方式更加简洁和易于理解。</p>
<ol>
<li>深层查找属性值</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;pets&quot;: [&#123;&quot;name&quot;:&quot;dog1&quot;&#125;, &#123;&quot;name&quot;: &quot;dog2&quot;&#125;] &quot;pets&quot;: [&#123;&quot;name&quot;:&quot;dog3&quot;&#125;, &#123;&quot;name&quot;: &quot;dog4&quot;&#125;]ownerArr.map(function(owner)&#123; return owner.pets[0].name;_.map(ownerArr, &apos;pets[0].name&apos;);</div></pre></td></tr></table></figure>
<p><code>_.map</code> 方法是对原生 <code>map</code> 方法的改进，其中使用 <code>pets[0].name</code> 字符串对嵌套数据取值的方式简化了很多冗余的代码，非常类似使用 jQuery 选择 DOM 节点 <code>ul &gt; li &gt; a</code> ，对于前端开发者来说有种久违的亲切感。</p>
<ol>
<li>个性化数组</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Array.apply(null, Array(6)).map(function(item, index)&#123;_.times(6, _.uniqueId.bind(null, &apos;ball_&apos;));_.times(6, _.partial(_.uniqueId, &apos;ball_&apos;));</div></pre></td></tr></table></figure>
<p>在上面的代码中，我们要创建一个初始值不同、长度为 6 的数组，其中 <code>_.uniqueId</code> 方法用于生成独一无二的标识符（递增的数字，在程序运行期间保持独一无二）， <code>_partial</code> 方法是对 <code>bind</code> 的封装。</p>
<ol>
<li>深拷贝</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var objB = _.cloneDeep(objA);</div></pre></td></tr></table></figure>
<p>JavaScript 没有直接提供深拷贝的函数，但我们可以用其他函数来模拟，比如 <code>JSON.parse(JSON.stringify(objectToClone))</code> ，但这种方法要求对象中的属性值不能是函数。Lodash 中的 <code>_.cloneDeep</code> 函数封装了深拷贝的逻辑，用起来更加简洁。</p>
<ol>
<li>随机数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function getRandomNumber(min, max)&#123; return Math.floor(Math.random() * (max - min + 1)) + min;</div></pre></td></tr></table></figure>
<p>Lodash 的随机数生成函数更贴近实际开发，ECMAScript 的随机数生成函数是底层必备的接口，两者都不可或缺。此外，使用 <code>_.random(15, 20, true)</code> 还可以在 15 到 20 之间生成随机的浮点数。</p>
<ol>
<li>对象扩展</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object.prototype.extend = function(obj) &#123; if (obj.hasOwnProperty(i)) &#123;var objA = &#123;&quot;name&quot;: &quot;colin&quot;, &quot;car&quot;: &quot;suzuki&quot;&#125;;var objB = &#123;&quot;name&quot;: &quot;james&quot;, &quot;age&quot;: 17&#125;;</div></pre></td></tr></table></figure>
<p><code>_.assign</code> 是浅拷贝，和 ES6 新增的 <code>Ojbect.assign</code> 函数功能一致（建议优先使用 <code>Object.assign</code> ）。</p>
<ol>
<li>筛选属性</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object.prototype.remove = function(arr) &#123; arr.forEach(function(key)&#123;var objA = &#123;&quot;name&quot;: &quot;colin&quot;, &quot;car&quot;: &quot;suzuki&quot;, &quot;age&quot;: 17&#125;;objA.remove([&apos;car&apos;, &apos;age&apos;]);objA = _.omit(objA, [&apos;car&apos;, &apos;age&apos;]);objA = _.omit(objA, &apos;car&apos;);objA = _.omit(objA, _.isNumber);</div></pre></td></tr></table></figure>
<p>大多数情况下，Lodash 所提供的辅助函数都会比原生的函数更贴近开发需求。在上面的代码中，开发者可以使用数组、字符串以及函数的方式筛选对象的属性，并且最终会返回一个新的对象，中间执行筛选时不会对旧对象产生影响。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object.prototype.pick = function(arr) &#123; arr.forEach(function(key)&#123;var objA = &#123;&quot;name&quot;: &quot;colin&quot;, &quot;car&quot;: &quot;suzuki&quot;, &quot;age&quot;: 17&#125;;var objB = objA.pick([&apos;car&apos;, &apos;age&apos;]);var objB = _.pick(objA, [&apos;car&apos;, &apos;age&apos;]);</div></pre></td></tr></table></figure>
<p><code>_.pick</code> 是 <code>_.omit</code> 的相反操作，用于从其他对象中挑选属性生成新的对象。</p>
<ol>
<li>随机元素</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var luckyDraw = [&quot;Colin&quot;, &quot;John&quot;, &quot;James&quot;, &quot;Lily&quot;, &quot;Mary&quot;];function pickRandomPerson(luckyDraw)&#123; var index = Math.floor(Math.random() * (luckyDraw.length -1));pickRandomPerson(luckyDraw);</div></pre></td></tr></table></figure>
<p><code>_.sample</code> 支持随机挑选多个元素并返回心的数组。</p>
<ol>
<li>针对 JSON.parse 的错误处理</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function parseLodash(str)&#123; return _.attempt(JSON.parse.bind(null, str));parse(&apos;&#123;&quot;name&quot;: &quot;colin&quot;&#125;&apos;);parseLodash(&apos;&#123;&quot;name&quot;: &quot;colin&quot;&#125;&apos;);</div></pre></td></tr></table></figure>
<p>如果你在使用 <code>JSON.parse</code> 时没有预置错误处理，那么它很有可能会成为一个定时炸弹，我们不应该默认接收的 JSON 对象都是有效的。 <code>try-catch</code> 是最常见的错误处理方式，如果项目中 Lodash，那么可以使用 <code>_.attmpt</code> 替代 <code>try-catch</code> 的方式，当解析 JSON 出错时，该方法会返回一个 <code>Error</code> 对象。</p>
<blockquote>
<p>随着 ES6 的普及，Lodash 的功能或多或少会被原生功能所替代，所以使用时还需要进一步甄别，建议优先使用原生函数，有关 ES6 替代 Lodash 的部分，请参考文章 <a href="https://www.sitepoint.com/lodash-features-replace-es6/" target="_blank" rel="external">《10 Lodash Features You Can Replace with ES6》</a> （中文版 <a href="http://www.zcfy.cc/article/10-lodash-features-you-can-replace-with-es6-467.html" target="_blank" rel="external">《10 个可用 ES6 替代的 Lodash 特性》</a> ）。</p>
</blockquote>
<p>其中有两处非常值得一看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const object = &#123; &apos;a&apos;: [&#123; &apos;b&apos;: &#123; &apos;c&apos;: 3 &#125; &#125;, 4] &#125;;].map(path =&gt; path(object));const pipe = functions =&gt; data =&gt; &#123; (value, func) =&gt; func(value),</div></pre></td></tr></table></figure>
<p>在 ES6 中，如果一个函数只接收一个形参且函数体是一个 <code>return</code> 语句，就可以使用箭头函数简化为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const func = function (p) &#123;</div></pre></td></tr></table></figure>
<p>当有多重嵌套时，可以简化为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const func = a =&gt; b =&gt; c =&gt; a + b + c;const func = function (a) &#123;</div></pre></td></tr></table></figure>
<p> 参考资料 </p>
<p><a href="http://pinggod.com/2016/Lodash/" target="_blank" rel="external">Lodash</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Lodash&quot;&gt;&lt;a href=&quot;#Lodash&quot; class=&quot;headerlink&quot; title=&quot;Lodash&quot;&gt;&lt;/a&gt;Lodash&lt;/h1&gt;&lt;p&gt;有多年开发经验的工程师，往往都会有自己的一套工具库，称为 utils、helpers 等等，这套库一方面是自
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>rem笔记</title>
    <link href="http://this.dog/2017/04/17/about-rem/"/>
    <id>http://this.dog/2017/04/17/about-rem/</id>
    <published>2017-04-16T16:01:43.000Z</published>
    <updated>2017-04-16T16:03:43.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</div><div class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</div><div class="line">        recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</div><div class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</div><div class="line">            docEl.style.fontSize = <span class="number">20</span> * (clientWidth / <span class="number">320</span>) + <span class="string">'px'</span>;</div><div class="line">        &#125;;</div><div class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</div><div class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</div><div class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</div><div class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;doc, win&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; docEl = doc.documentElement,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        resizeEvt = &lt;span class=&quot;string&quot;&gt;&#39;orientationchange&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&#39;orientationchange&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;resize&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        recalc = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; clientWidth = docEl.clientWidth;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!clientWidth) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            docEl.style.fontSize = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; * (clientWidth / &lt;span class=&quot;number&quot;&gt;320&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&#39;px&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!doc.addEventListener) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    win.addEventListener(resizeEvt, recalc, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    doc.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;DOMContentLoaded&#39;&lt;/span&gt;, recalc, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Blog自动化部署</title>
    <link href="http://this.dog/2017/04/08/auto-deploy-blog/"/>
    <id>http://this.dog/2017/04/08/auto-deploy-blog/</id>
    <published>2017-04-08T09:16:32.000Z</published>
    <updated>2017-04-12T05:43:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>懒惰一直是码农优秀的品质。<br>之前把blog是部署在github page上,而现在扔到自己服务器部署就麻烦了一点，不过还好github有<code>webhook</code>功能，很方便的就能实现自动部署。</p>
<h3 id="1-配置hexo"><a href="#1-配置hexo" class="headerlink" title="1.配置hexo"></a>1.配置hexo</h3><p>首先Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。<br>因为我是把代码托管在GitHub上，所以首先安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>修改配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: &lt;repository url&gt;</div><div class="line">  branch: [branch]</div><div class="line">  message: [message]</div></pre></td></tr></table></figure></p>
<p>配置完成之后输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g #生成静态文件</div><div class="line">$ hexo d #上传静态文件</div></pre></td></tr></table></figure></p>
<p>hexo会自动生成静态文件，然后把静态文件拷贝到<code>.deploy_git</code>，然后根据你的配置提交到仓库，默认为gh-page分支。</p>
<h3 id="2-配置GitHub的Webhook"><a href="#2-配置GitHub的Webhook" class="headerlink" title="2.配置GitHub的Webhook"></a>2.配置GitHub的Webhook</h3><p>打开项目页面。在<code>Setting-&gt;Webhooks</code>中配置<code>webhooks</code><br><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fefeplnzryj31kw15ddob.jpg" alt="github"><br>添加完成之后可以发送请求来测试是否成功，github的请求头中会带有secret,测试的<code>X-GitHub-Event</code>为<code>ping</code>。<br><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fehfjmgdwhj31c012o7ai.jpg" alt="Redeliver"></p>
<h3 id="3-服务器接口"><a href="#3-服务器接口" class="headerlink" title="3.服务器接口"></a>3.服务器接口</h3><p>现在就需要实现服务器接口了，本来打算自己写，结果发现有个现成的库: <a href="https://github.com/rvagg/github-webhook-handler" target="_blank" rel="external">github-webhook-handler</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install github-webhook-handler</div></pre></td></tr></table></figure></p>
<p>实例代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</div><div class="line"><span class="keyword">var</span> handler = createHandler(&#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">secret</span>: <span class="string">'myhashsecret'</span> &#125;)</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    res.statusCode = <span class="number">404</span></div><div class="line">    res.end(<span class="string">'no such location'</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;).listen(<span class="number">7777</span>)</div><div class="line"></div><div class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</div><div class="line">    event.payload.repository.name,</div><div class="line">    event.payload.ref)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">handler.on(<span class="string">'issues'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Received an issue event for %s action=%s: #%d %s'</span>,</div><div class="line">    event.payload.repository.name,</div><div class="line">    event.payload.action,</div><div class="line">    event.payload.issue.number,</div><div class="line">    event.payload.issue.title)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">handler.on(<span class="string">'ping'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a ping event for %s to %s'</span>,</div><div class="line">    event.payload.repository.name,</div><div class="line">    event.payload.ref)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>将<code>path</code>和<code>secret</code>改成自己对应的地址和密钥，运动这段代码，会监听端口<code>7777</code>的请求。配置好域名和nginx的反向代理就可以测试效果了。其中<code>ping</code>就是专门处理测试效果的。</p>
<h3 id="4-运行shell"><a href="#4-运行shell" class="headerlink" title="4.运行shell"></a>4.运行shell</h3><p>接收到github的请求之后，需要运行shell来更新代码。我先写了个简单的<code>deploy.sh</code>，在收到请求之后运行代码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</div><div class="line"><span class="keyword">var</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line"><span class="keyword">var</span> handler = createHandler(&#123;</div><div class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">  <span class="attr">secret</span>: <span class="string">'myhashsecret'</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> rumCommand = <span class="function">(<span class="params">cmd, args, callback</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> child = child_process.spawn(cmd, args)</div><div class="line">  <span class="keyword">let</span> response = <span class="string">''</span></div><div class="line">  child.stdout.on(<span class="string">'data'</span>, buffer =&gt; response += buffer.toString())</div><div class="line">  child.stdout.on(<span class="string">'end'</span>, () =&gt; callback(response))</div><div class="line">&#125;</div><div class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>, event.payload.repository.name, event.payload.ref);</div><div class="line">  rumCommand(<span class="string">'sh'</span>, [<span class="string">'./deploy.sh'</span>], txt =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(txt)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line">handler.on(<span class="string">'ping'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a ping event for %s to %s'</span>,</div><div class="line">    event.payload.repository.name,</div><div class="line">    event.payload.ref)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="5-使用pm2运行node"><a href="#5-使用pm2运行node" class="headerlink" title="5.使用pm2运行node"></a>5.使用pm2运行node</h3><p>最后用<code>pm2</code>来守护<code>node</code>进程。<br><a href="https://github.com/rvagg/github-webhook-handler" target="_blank" rel="external">pm2</a>是一个带有负载均衡功能的Node应用的进程管理器.<br>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g pm2</div></pre></td></tr></table></figure></p>
<p>运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start index.js</div></pre></td></tr></table></figure></p>
<p>pm2j就成功启动了。<br><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fehl11h63tj31j4132jy3.jpg" alt="pm2"></p>
<p>我们可以通过简单的命令查看应用的运行状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 list</div></pre></td></tr></table></figure></p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fehl3oahnfj319u05w3zv.jpg" alt="pm2"></p>
<p>更多pm2内容请参考官方文档：<a href="http://pm2.keymetrics.io/docs/usage/quick-start" target="_blank" rel="external">http://pm2.keymetrics.io/docs/usage/quick-start</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此就完成了blog的自动部署，虽然难度不大还是用到了好多小知识。之后还可以优化下细节，比如增加点日志监控等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;懒惰一直是码农优秀的品质。&lt;br&gt;之前把blog是部署在github page上,而现在扔到自己服务器部署就麻烦了一点，不过还好github有&lt;code&gt;webhook&lt;/code&gt;功能，很方便的就能实现自动部署。&lt;/p&gt;
&lt;h3 id=&quot;1-配置hexo&quot;&gt;&lt;a href=&quot;#1-配置hexo&quot; class=&quot;headerlink&quot; title=&quot;1.配置hexo&quot;&gt;&lt;/a&gt;1.配置hexo&lt;/h3&gt;&lt;p&gt;首先Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。&lt;br&gt;因为我是把代码托管在GitHub上，所以首先安装 &lt;a href=&quot;https://github.com/hexojs/hexo-deployer-git&quot;&gt;hexo-deployer-git&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-deployer-git --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iTerm2 + Zsh + oh-my-zsh</title>
    <link href="http://this.dog/2017/03/24/iterm2-zsh-omz/"/>
    <id>http://this.dog/2017/03/24/iterm2-zsh-omz/</id>
    <published>2017-03-24T02:25:14.000Z</published>
    <updated>2017-03-27T03:23:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司来了很多新人需要配置Mac环境，都给他们推荐配置<code>iTerm2</code>+<code>Zsh</code>+<code>oh-my-zsh</code>。</p>
<p><img src="https://camo.githubusercontent.com/80ec23fda88d2f445906a3502690f22827336736/687474703a2f2f692e696d6775722e636f6d2f777942565a51792e676966" alt="powerlevel9k"><br><a id="more"></a></p>
<p><a href="http://www.iterm2.com/" target="_blank" rel="external">iTerm2</a> 应该是 是 MAC 下最好的终端工具。我的终端固定在上半屏幕，使用cmd+,呼入呼出，再加上一些配色定制，用起来十分过瘾，用习惯之后根本无法适应win了。</p>
<p>而<code>Zsh</code>号称是终极shell，功能强大并且兼容<code>bash</code>，只不过配置比较复杂，但是如果安装了<code>oh my zsh</code>补丁就能轻松起飞！</p>
<p><code>Zsh</code>具有以下主要功能</p>
<ul>
<li><p>开箱即用、可编程的命令行补全功能可以帮助用户输入各种参数以及选项</p>
</li>
<li><p>在用户启动的所有shell中共享命令历史</p>
</li>
<li><p>通过扩展的文件通配符，可以不利用外部命令达到find命令一般展开文件名</p>
</li>
<li><p>改进的变量与数组处理</p>
</li>
<li><p>在缓冲区中编辑多行命令</p>
</li>
<li><p>多种兼容模式，例如使用/bin/sh运行时可以伪装成Bourne shell</p>
</li>
<li><p>可以定制呈现形式的提示符；包括在屏幕右端显示信息，并在键入长命令时自动隐藏</p>
</li>
<li><p>可加载的模块，提供其他各种支持：完整的TCP与Unix域套接字控制，FTP客户端与扩充过的数学函数</p>
</li>
<li><p>完全可定制化</p>
</li>
</ul>
<p>让我们来安装吧<br>首先输入命令行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/shells</div></pre></td></tr></table></figure>
<p>显示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/bin/bash</div><div class="line">/bin/csh</div><div class="line">/bin/ksh</div><div class="line">/bin/sh</div><div class="line">/bin/tcsh</div><div class="line">/bin/zsh</div></pre></td></tr></table></figure>
<p>你会发现mac已经预装了zsh。如果是linux想要装zsh的话</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo yum install zsh</div><div class="line">或者</div><div class="line">sudo apt-get install zsh</div></pre></td></tr></table></figure>
<p>接下来我们需要下载 oh-my-zsh 项目来帮我们配置 zsh</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</div></pre></td></tr></table></figure>
<p>安装 oh-my-zsh 时,它自动读取你的环境变量并且自动帮 zsh 进行设置<br>所以这时的zsh 基本已经配置完成,输入命令就可以切换到 zsh 模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s /usr/local/bin/zsh</div></pre></td></tr></table></figure>
<p>现在重启下终端或者新开一个tab会发现已经是彩色的shell了。<br><code>Zsh</code>的配置在<code>.zshrc</code>中，默认的主题是<code>robbyrussell</code>，给大家推荐一个酷炫的主题<code>powerlevel9k</code>。<br><img src="https://camo.githubusercontent.com/31da002de611cfef95f6daaa8b1baedef4079703/687474703a2f2f6268696c6275726e2e6f72672f636f6e74656e742f696d616765732f323031352f30312f706c396b2d696d70726f7665642e706e67" alt="powerlevel9l"></p>
<p>首先安装<code>powerlevel9k</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/bhilburn/powerlevel9k.git ~/powerlevel9k</div><div class="line">$ echo &apos;source  ~/powerlevel9k/powerlevel9k.zsh-theme&apos; &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure>
<p>然后在<code>oh-my-zsh</code>下的<code>custom/themes</code>文件夹中安装主题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</div></pre></td></tr></table></figure></p>
<p>最后在你的<code>.zshrc</code>中把主题替换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME=&quot;powerlevel9k/powerlevel9k”</div></pre></td></tr></table></figure></p>
<p>如果发现shell还有些乱码的话是因为还需要安装powerline fonts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 下载powerline fonts项目</div><div class="line">git clone https://github.com/powerline/fonts</div><div class="line">// 执行安装</div><div class="line">./fonts/install.sh</div></pre></td></tr></table></figure></p>
<p>然后配置iTerm<br>在 <code>Preperence → Profiles → Text → Front</code> 中，<br>和 <code>Preperence → Profiles → Text → Non-ASCII Font</code> 中<br>改变字体为 <code>Sauce Code Powerline</code></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdxrx06ki2j31kw10mdrx.jpg" alt="改变字体"></p>
<p><a href="https://github.com/bhilburn/powerlevel9k/wiki/Show-Off-Your-Config#natemccurdys-configuration" target="_blank" rel="external">这里</a> 还有更多酷炫的配置</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司来了很多新人需要配置Mac环境，都给他们推荐配置&lt;code&gt;iTerm2&lt;/code&gt;+&lt;code&gt;Zsh&lt;/code&gt;+&lt;code&gt;oh-my-zsh&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/80ec23fda88d2f445906a3502690f22827336736/687474703a2f2f692e696d6775722e636f6d2f777942565a51792e676966&quot; alt=&quot;powerlevel9k&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="mac" scheme="http://this.dog/tags/mac/"/>
    
  </entry>
  
</feed>

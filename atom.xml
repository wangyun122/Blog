<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>this.dog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://this.dog/"/>
  <updated>2017-04-10T07:37:59.000Z</updated>
  <id>http://this.dog/</id>
  
  <author>
    <name>wangyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Blog自动化部署</title>
    <link href="http://this.dog/2017/04/08/auto-deploy-blog/"/>
    <id>http://this.dog/2017/04/08/auto-deploy-blog/</id>
    <published>2017-04-08T09:16:32.000Z</published>
    <updated>2017-04-10T07:37:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>懒惰一直是码农优秀的品质。<br>之前把blog是部署在github page上,而现在扔到自己服务器部署就麻烦了一点，不过还好github有<code>webhook</code>功能，很方便的就能实现自动部署。</p>
<h3 id="1-配置hexo"><a href="#1-配置hexo" class="headerlink" title="1.配置hexo"></a>1.配置hexo</h3><p>首先Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。<br>因为我是把代码托管在GitHub上，所以首先安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>修改配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: &lt;repository url&gt;</div><div class="line">  branch: [branch]</div><div class="line">  message: [message]</div></pre></td></tr></table></figure></p>
<p>配置完成之后输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g #生成静态文件</div><div class="line">$ hexo d #上传静态文件</div></pre></td></tr></table></figure></p>
<p>hexo会自动生成静态文件，然后把静态文件拷贝到<code>.deploy_git</code>，然后根据你的配置提交到仓库，默认为gh-page分支。</p>
<h3 id="2-配置GitHub的Webhook"><a href="#2-配置GitHub的Webhook" class="headerlink" title="2.配置GitHub的Webhook"></a>2.配置GitHub的Webhook</h3><p>打开项目页面。在<code>Setting-&gt;Webhooks</code>中配置<code>webhooks</code><br><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fefeplnzryj31kw15ddob.jpg" alt="github"><br>添加完成之后可以发送请求来测试是否成功，github的请求头中会带有secret,测试的<code>X-GitHub-Event</code>为<code>ping</code>。<br><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fehfjmgdwhj31c012o7ai.jpg" alt="Redeliver"></p>
<h3 id="3-服务器接口"><a href="#3-服务器接口" class="headerlink" title="3.服务器接口"></a>3.服务器接口</h3><p>现在就需要实现服务器接口了，本来打算自己写，结果发现有个现成的库: <a href="https://github.com/rvagg/github-webhook-handler" target="_blank" rel="external">github-webhook-handler</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install github-webhook-handler</div></pre></td></tr></table></figure></p>
<p>实例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var http = require(&apos;http&apos;)</div><div class="line">var createHandler = require(&apos;github-webhook-handler&apos;)</div><div class="line">var handler = createHandler(&#123; path: &apos;/&apos;, secret: &apos;myhashsecret&apos; &#125;)</div><div class="line"></div><div class="line">http.createServer(function (req, res) &#123;</div><div class="line">  handler(req, res, function (err) &#123;</div><div class="line">    res.statusCode = 404</div><div class="line">    res.end(&apos;no such location&apos;)</div><div class="line">  &#125;)</div><div class="line">&#125;).listen(7777)</div><div class="line"></div><div class="line">handler.on(&apos;error&apos;, function (err) &#123;</div><div class="line">  console.error(&apos;Error:&apos;, err.message)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">handler.on(&apos;push&apos;, function (event) &#123;</div><div class="line">  console.log(&apos;Received a push event for %s to %s&apos;,</div><div class="line">    event.payload.repository.name,</div><div class="line">    event.payload.ref)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">handler.on(&apos;issues&apos;, function (event) &#123;</div><div class="line">  console.log(&apos;Received an issue event for %s action=%s: #%d %s&apos;,</div><div class="line">    event.payload.repository.name,</div><div class="line">    event.payload.action,</div><div class="line">    event.payload.issue.number,</div><div class="line">    event.payload.issue.title)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">handler.on(&apos;ping&apos;, function (event) &#123;</div><div class="line">  console.log(&apos;Received a ping event for %s to %s&apos;,</div><div class="line">    event.payload.repository.name,</div><div class="line">    event.payload.ref)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>将<code>path</code>和<code>secret</code>改成自己对应的地址和密钥，运动这段代码，会监听端口<code>7777</code>的请求。配置好域名和nginx的反向代理就可以测试效果了。其中<code>ping</code>就是专门处理测试效果的。</p>
<h3 id="4-运行shell"><a href="#4-运行shell" class="headerlink" title="4.运行shell"></a>4.运行shell</h3><p>接收到github的请求之后，需要运行shell来更新代码。我先写了个简单的<code>deploy.sh</code>，在收到请求之后运行代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var http = require(&apos;http&apos;)</div><div class="line">var createHandler = require(&apos;github-webhook-handler&apos;)</div><div class="line">var child_process = require(&apos;child_process&apos;);</div><div class="line">var handler = createHandler(&#123;</div><div class="line">  path: &apos;/&apos;,</div><div class="line">  secret: &apos;myhashsecret&apos;</div><div class="line">&#125;)</div><div class="line">const rumCommand = (cmd, args, callback) =&gt; &#123;</div><div class="line">  const child = child_process.spawn(cmd, args)</div><div class="line">  let response = &apos;&apos;</div><div class="line">  child.stdout.on(&apos;data&apos;, buffer =&gt; response += buffer.toString())</div><div class="line">  child.stdout.on(&apos;end&apos;, () =&gt; callback(response))</div><div class="line">&#125;</div><div class="line">handler.on(&apos;push&apos;, function(event) &#123;</div><div class="line">  console.log(&apos;Received a push event for %s to %s&apos;, event.payload.repository.name, event.payload.ref);</div><div class="line">  rumCommand(&apos;sh&apos;, [&apos;./deploy.sh&apos;], txt =&gt; &#123;</div><div class="line">    console.log(txt)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line">handler.on(&apos;ping&apos;, function (event) &#123;</div><div class="line">  console.log(&apos;Received a ping event for %s to %s&apos;,</div><div class="line">    event.payload.repository.name,</div><div class="line">    event.payload.ref)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="5-使用pm2运行node"><a href="#5-使用pm2运行node" class="headerlink" title="5.使用pm2运行node"></a>5.使用pm2运行node</h3><p>最后用<code>pm2</code>来守护<code>node</code>进程。<br><a href="https://github.com/rvagg/github-webhook-handler" target="_blank" rel="external">pm2</a>是一个带有负载均衡功能的Node应用的进程管理器.<br>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g pm2</div></pre></td></tr></table></figure></p>
<p>运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start index.js</div></pre></td></tr></table></figure></p>
<p>pm2j就成功启动了。<br><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fehl11h63tj31j4132jy3.jpg" alt="pm2"></p>
<p>我们可以通过简单的命令查看应用的运行状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 list</div></pre></td></tr></table></figure></p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fehl3oahnfj319u05w3zv.jpg" alt="pm2"></p>
<p>更多pm2内容请参考官方文档：<a href="http://pm2.keymetrics.io/docs/usage/quick-start" target="_blank" rel="external">http://pm2.keymetrics.io/docs/usage/quick-start</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此就完成了blog的自动部署，虽然难度不大还是用到了好多小知识。之后还可以优化下细节，比如增加点日志监控等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;懒惰一直是码农优秀的品质。&lt;br&gt;之前把blog是部署在github page上,而现在扔到自己服务器部署就麻烦了一点，不过还好github有&lt;code&gt;webhook&lt;/code&gt;功能，很方便的就能实现自动部署。&lt;/p&gt;
&lt;h3 id=&quot;1-配置hexo&quot;&gt;&lt;a href=&quot;#1-配置hexo&quot; class=&quot;headerlink&quot; title=&quot;1.配置hexo&quot;&gt;&lt;/a&gt;1.配置hexo&lt;/h3&gt;&lt;p&gt;首先Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。&lt;br&gt;因为我是把代码托管在GitHub上，所以首先安装 &lt;a href=&quot;https://github.com/hexojs/hexo-deployer-git&quot;&gt;hexo-deployer-git&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-deployer-git --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iTerm2 + Zsh + oh-my-zsh</title>
    <link href="http://this.dog/2017/03/24/iterm2-zsh-omz/"/>
    <id>http://this.dog/2017/03/24/iterm2-zsh-omz/</id>
    <published>2017-03-24T02:25:14.000Z</published>
    <updated>2017-03-27T03:23:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司来了很多新人需要配置Mac环境，都给他们推荐配置<code>iTerm2</code>+<code>Zsh</code>+<code>oh-my-zsh</code>。</p>
<p><img src="https://camo.githubusercontent.com/80ec23fda88d2f445906a3502690f22827336736/687474703a2f2f692e696d6775722e636f6d2f777942565a51792e676966" alt="powerlevel9k"><br><a id="more"></a></p>
<p><a href="http://www.iterm2.com/" target="_blank" rel="external">iTerm2</a> 应该是 是 MAC 下最好的终端工具。我的终端固定在上半屏幕，使用cmd+,呼入呼出，再加上一些配色定制，用起来十分过瘾，用习惯之后根本无法适应win了。</p>
<p>而<code>Zsh</code>号称是终极shell，功能强大并且兼容<code>bash</code>，只不过配置比较复杂，但是如果安装了<code>oh my zsh</code>补丁就能轻松起飞！</p>
<p><code>Zsh</code>具有以下主要功能</p>
<ul>
<li><p>开箱即用、可编程的命令行补全功能可以帮助用户输入各种参数以及选项</p>
</li>
<li><p>在用户启动的所有shell中共享命令历史</p>
</li>
<li><p>通过扩展的文件通配符，可以不利用外部命令达到find命令一般展开文件名</p>
</li>
<li><p>改进的变量与数组处理</p>
</li>
<li><p>在缓冲区中编辑多行命令</p>
</li>
<li><p>多种兼容模式，例如使用/bin/sh运行时可以伪装成Bourne shell</p>
</li>
<li><p>可以定制呈现形式的提示符；包括在屏幕右端显示信息，并在键入长命令时自动隐藏</p>
</li>
<li><p>可加载的模块，提供其他各种支持：完整的TCP与Unix域套接字控制，FTP客户端与扩充过的数学函数</p>
</li>
<li><p>完全可定制化</p>
</li>
</ul>
<p>让我们来安装吧<br>首先输入命令行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/shells</div></pre></td></tr></table></figure>
<p>显示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/bin/bash</div><div class="line">/bin/csh</div><div class="line">/bin/ksh</div><div class="line">/bin/sh</div><div class="line">/bin/tcsh</div><div class="line">/bin/zsh</div></pre></td></tr></table></figure>
<p>你会发现mac已经预装了zsh。如果是linux想要装zsh的话</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo yum install zsh</div><div class="line">或者</div><div class="line">sudo apt-get install zsh</div></pre></td></tr></table></figure>
<p>接下来我们需要下载 oh-my-zsh 项目来帮我们配置 zsh</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</div></pre></td></tr></table></figure>
<p>安装 oh-my-zsh 时,它自动读取你的环境变量并且自动帮 zsh 进行设置<br>所以这时的zsh 基本已经配置完成,输入命令就可以切换到 zsh 模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s /usr/local/bin/zsh</div></pre></td></tr></table></figure>
<p>现在重启下终端或者新开一个tab会发现已经是彩色的shell了。<br><code>Zsh</code>的配置在<code>.zshrc</code>中，默认的主题是<code>robbyrussell</code>，给大家推荐一个酷炫的主题<code>powerlevel9k</code>。<br><img src="https://camo.githubusercontent.com/31da002de611cfef95f6daaa8b1baedef4079703/687474703a2f2f6268696c6275726e2e6f72672f636f6e74656e742f696d616765732f323031352f30312f706c396b2d696d70726f7665642e706e67" alt="powerlevel9l"></p>
<p>首先安装<code>powerlevel9k</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/bhilburn/powerlevel9k.git ~/powerlevel9k</div><div class="line">$ echo &apos;source  ~/powerlevel9k/powerlevel9k.zsh-theme&apos; &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure>
<p>然后在<code>oh-my-zsh</code>下的<code>custom/themes</code>文件夹中安装主题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</div></pre></td></tr></table></figure></p>
<p>最后在你的<code>.zshrc</code>中把主题替换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME=&quot;powerlevel9k/powerlevel9k”</div></pre></td></tr></table></figure></p>
<p>如果发现shell还有些乱码的话是因为还需要安装powerline fonts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 下载powerline fonts项目</div><div class="line">git clone https://github.com/powerline/fonts</div><div class="line">// 执行安装</div><div class="line">./fonts/install.sh</div></pre></td></tr></table></figure></p>
<p>然后配置iTerm<br>在 <code>Preperence → Profiles → Text → Front</code> 中，<br>和 <code>Preperence → Profiles → Text → Non-ASCII Font</code> 中<br>改变字体为 <code>Sauce Code Powerline</code></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdxrx06ki2j31kw10mdrx.jpg" alt="改变字体"></p>
<p><a href="https://github.com/bhilburn/powerlevel9k/wiki/Show-Off-Your-Config#natemccurdys-configuration" target="_blank" rel="external">这里</a> 还有更多酷炫的配置</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司来了很多新人需要配置Mac环境，都给他们推荐配置&lt;code&gt;iTerm2&lt;/code&gt;+&lt;code&gt;Zsh&lt;/code&gt;+&lt;code&gt;oh-my-zsh&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/80ec23fda88d2f445906a3502690f22827336736/687474703a2f2f692e696d6775722e636f6d2f777942565a51792e676966&quot; alt=&quot;powerlevel9k&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="mac" scheme="http://this.dog/tags/mac/"/>
    
  </entry>
  
</feed>
